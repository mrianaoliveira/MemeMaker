{"ast":null,"code":"var _jsxFileName = \"/home/mariana/Documents/reactjs/MemeMaker/src/pages/home/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport qs from 'qs'; // import { Wrapper, Card, Templates, Form, Button } from './styles';\n\nimport { Wrapper, Card, Templetes, Form, Button } from \"./style\";\nimport logo from '../../images/logo.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n\n  const [templates, setTemplates] = useState([]);\n  const [selectedTemplate, setSelectedTemplate] = useState(null);\n  const [boxes, setBoxes] = useState([]);\n  const [generatedMeme, setGeneratedMeme] = useState(null);\n  useEffect(() => {\n    (async () => {\n      const resp = await fetch('https://api.imgflip.com/get_memes');\n      const {\n        data: {\n          memes\n        }\n      } = await resp.json();\n      setTemplates(memes);\n    })();\n  }, []); // currying -> função que retorna outra função\n\n  const handleInputChange = index => e => {\n    const newValues = boxes;\n    newValues[index] = e.target.value;\n    setBoxes(newValues);\n  };\n\n  function handleSelectTemplate(template) {\n    setSelectedTemplate(template);\n    setBoxes([]);\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    const params = qs.stringify({\n      template_id: selectedTemplate.id,\n      username: 'vikayel543',\n      password: 'vikayel543',\n      boxes: boxes.map(text => ({\n        text\n      }))\n    });\n    const resp = await fetch(`https://api.imgflip.com/caption_image?${params}`);\n    const {\n      data: {\n        url\n      }\n    } = await resp.json();\n    setGeneratedMeme(url);\n  }\n\n  function handleReset() {\n    setSelectedTemplate(null);\n    setBoxes([]);\n    setGeneratedMeme(null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: logo,\n      alt: \"MemeMaker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      children: [generatedMeme && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: generatedMeme,\n          alt: \"Generated Meme\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"button\",\n          onClick: handleReset,\n          children: \"Criar outro meme\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), !generatedMeme && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Selecione um template\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Templetes, {\n          children: templates.map(template => /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => handleSelectTemplate(template),\n            className: template.id === (selectedTemplate === null || selectedTemplate === void 0 ? void 0 : selectedTemplate.id) ? 'selected' : '',\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: template.url,\n              alt: template.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 19\n            }, this)\n          }, template.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), selectedTemplate && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Textos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: handleSubmit,\n            children: [new Array(selectedTemplate.box_count).fill('').map((_, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n              placeholder: `Text #${index + 1}`,\n              onChange: handleInputChange(index)\n            }, String(Math.random()), false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 21\n            }, this)), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              children: \"MakeMyMeme!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"yfaztXFfY6C/X4R/IVB5dS/3dwQ=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/mariana/Documents/reactjs/MemeMaker/src/pages/home/index.js"],"names":["React","useState","useEffect","qs","Wrapper","Card","Templetes","Form","Button","logo","Home","templates","setTemplates","selectedTemplate","setSelectedTemplate","boxes","setBoxes","generatedMeme","setGeneratedMeme","resp","fetch","data","memes","json","handleInputChange","index","e","newValues","target","value","handleSelectTemplate","template","handleSubmit","preventDefault","params","stringify","template_id","id","username","password","map","text","url","handleReset","name","Array","box_count","fill","_","String","Math","random"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport qs from 'qs';\n\n// import { Wrapper, Card, Templates, Form, Button } from './styles';\nimport { Wrapper, Card, Templetes, Form, Button} from \"./style\";\nimport logo from '../../images/logo.svg'\n\nexport default function Home() {\n  const [templates, setTemplates] = useState([]);\n  const [selectedTemplate, setSelectedTemplate] = useState(null);\n  const [boxes, setBoxes] = useState([]);\n  const [generatedMeme, setGeneratedMeme] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      const resp = await fetch('https://api.imgflip.com/get_memes');\n      const { data: { memes } } = await resp.json();\n      setTemplates(memes);\n    })();\n  }, []);\n\n  // currying -> função que retorna outra função\n  const handleInputChange = (index) => (e) => {\n    const newValues = boxes;\n    newValues[index] = e.target.value;\n    setBoxes(newValues);\n  };\n\n  function handleSelectTemplate(template) {\n    setSelectedTemplate(template);\n    setBoxes([]);\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    const params = qs.stringify({\n      template_id: selectedTemplate.id,\n      username: 'vikayel543',\n      password: 'vikayel543',\n      boxes: boxes.map(text => ({ text })),\n    });\n\n    const resp = await fetch(`https://api.imgflip.com/caption_image?${params}`);\n    const { data: { url } } = await resp.json();\n\n    setGeneratedMeme(url);\n  }\n\n  function handleReset() {\n    setSelectedTemplate(null);\n    setBoxes([]);\n    setGeneratedMeme(null);\n  }\n\n  return (\n    <Wrapper>\n      <img src={logo} alt=\"MemeMaker\"/>\n\n      <Card>\n        {generatedMeme && (\n          <>\n            <img src={generatedMeme} alt=\"Generated Meme\" />\n            <Button type=\"button\" onClick={handleReset}>Criar outro meme</Button>\n          </>\n        )}\n\n        {!generatedMeme && (\n          <>\n            <h2>Selecione um template</h2>\n            <Templetes>\n              {templates.map((template) => (\n                <button\n                  key={template.id}\n                  type=\"button\"\n                  onClick={() => handleSelectTemplate(template)}\n                  className={template.id === selectedTemplate?.id ? 'selected' : ''}\n                >\n                  <img src={template.url} alt={template.name} />\n                </button>\n              ))}\n            </Templetes>\n\n            {selectedTemplate && (\n              <>\n                <h2>Textos</h2>\n                <Form onSubmit={handleSubmit}>\n                  {(new Array(selectedTemplate.box_count)).fill('').map((_, index) => (\n                    <input\n                      key={String(Math.random())}\n                      placeholder={`Text #${index + 1}`}\n                      onChange={handleInputChange(index)}\n                    />\n                  ))}\n        \n                  <Button type=\"submit\">MakeMyMeme!</Button>\n                </Form>\n              </>\n            )}\n          </>\n        )}\n      </Card>\n    </Wrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}